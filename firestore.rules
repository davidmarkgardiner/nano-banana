rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isSignedIn() {
      return request.auth != null;
    }

    function adminEmails() {
      // Replace the sample address with the lowercase emails that should manage approvals
      return ['davidmarkgardiner@gmail.com'];
    }

    function isAdmin() {
      return isSignedIn()
        && request.auth.token.email != null
        && lower(request.auth.token.email) in adminEmails();
    }

    function isValidStatus(status) {
      return status == 'pending' || status == 'approved' || status == 'rejected';
    }

    function hasApprovedAccess() {
      if (!isSignedIn()) {
        return false;
      }

      let approval = get(/databases/$(database)/documents/userApprovals/$(request.auth.uid));

      return approval.data != null && approval.data.status == 'approved';
    }

    match /userApprovals/{userId} {
      function baseFields() {
        return ['status', 'email', 'displayName', 'requestedAt', 'updatedAt'];
      }

      function extendedFields() {
        return ['status', 'email', 'displayName', 'requestedAt', 'updatedAt', 'approvedBy', 'approvedAt'];
      }

      allow get: if isSignedIn() && (request.auth.uid == userId || isAdmin());
      allow list: if isAdmin();

      allow create: if request.auth.uid == userId
        && !exists(/databases/$(database)/documents/userApprovals/$(userId))
        && request.resource.data.requestedAt == request.time
        && request.resource.data.updatedAt == request.time
        && (
          (isAdmin()
            && request.resource.data.keys().hasOnly(extendedFields())
            && isValidStatus(request.resource.data.status))
          || (!isAdmin()
            && request.resource.data.keys().hasOnly(baseFields())
            && request.resource.data.status == 'pending')
        );

      allow update: if isAdmin()
        && request.resource.data.keys().hasOnly(extendedFields())
        && isValidStatus(request.resource.data.status)
        && request.resource.data.requestedAt == resource.data.requestedAt
        && request.resource.data.updatedAt == request.time;

      allow delete: if false;
    }

    match /messages/{document=**} {
      allow read, write: if hasApprovedAccess();
    }

    match /{document=**} {
      allow read, write: if false;
    }
  }
}
